{"version":3,"sources":["utils/init-firebas.js","context/AuthContext.js","components/Card.jsx","components/DividerWithText.jsx","components/Navlink.jsx","components/Navbar.jsx","components/Layout.jsx","pages/ForgotPasswordPage.jsx","pages/Homepage.jsx","hooks/useMounted.js","pages/Loginpage.jsx","pages/NotfoundPage.jsx","pages/Profilepage.jsx","pages/ProtectedPage.jsx","pages/Registerpage.jsx","pages/ResetPasswordPage.jsx","components/AppRouter.jsx","App.js","index.js"],"names":["app","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","getAuth","AuthContext","createContext","currentUser","register","Promise","login","logout","signInWithGoogle","ForgetPassword","resetPassord","useAuth","useContext","AuthContextProvider","children","useState","setcurrentUser","useEffect","unsubscribe","onAuthStateChanged","user","value","email","password","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","provider","GoogleAuthProvider","signInWithPopup","sendPasswordResetEmail","url","oobCode","newPassword","confirmPasswordReset","Provider","Card","props","bg","useColorModeValue","py","px","base","md","shadow","rounded","sm","DividerWithText","flexProps","align","color","flex","borderColor","as","fontWeight","Navlink","to","name","rest","isActive","useLocation","pathname","variant","colorScheme","Navbar","toggleColorMode","useColorMode","borderBottom","borderBottomColor","mb","justifyContent","maxW","mx","size","onClick","e","a","preventDefault","icon","Layout","ForgotPasswordPage","history","useHistory","setEmail","toast","useToast","textAlign","my","mt","form","onSubmit","then","response","console","log","description","status","duration","isCloseabele","catch","message","spacing","id","onChange","target","type","autoComplete","required","fontSize","push","Homepage","span","fontStyle","textTransform","borderRadius","useMounted","mounted","useRef","current","Loginpage","location","setPassword","isSubmiting","setIsSubmiting","inCloseable","state","from","error","finally","isLoading","isFullWidth","leftIcon","NotfoundPage","Profilepage","overflowX","pre","JSON","stringify","ProtectedPage","Registerpage","alert","ResetPasswordPage","query","URLSearchParams","search","useQuery","setNewPassword","get","res","err","AppRouter","exact","path","component","ProtechRoute","App","customTheme","extendTheme","config","initialColorMode","useSystemColorMode","colors","primary","theme","pink","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.43779bc4.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport  {getAuth} from 'firebase/auth'\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID,\n  }\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\nexport const auth = getAuth(app) ","import { \n    createUserWithEmailAndPassword, \n    signInWithEmailAndPassword,\n    onAuthStateChanged,\n    signOut,\n    GoogleAuthProvider,\n    signInWithPopup,\n    sendPasswordResetEmail,\n    confirmPasswordReset\n} from '@firebase/auth';\nimport {createContext,useContext,useEffect,useState} from 'react'\nimport { auth } from '../utils/init-firebas'\n\n\nconst AuthContext = createContext({\n    currentUser:null,\n    register: () => Promise,\n    login: () => Promise,\n    logout: () => Promise,\n    signInWithGoogle: () => Promise,\n    ForgetPassword: () => Promise,\n    resetPassord: ()=> Promise\n});\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport default function AuthContextProvider({children}){\n    const [currentUser, setcurrentUser] = useState(null)\n\n    useEffect(() => {\n        const unsubscribe = onAuthStateChanged(auth,user => {\n            setcurrentUser(user);\n        })\n        return () => {\n            unsubscribe()\n        }\n    }, [])\n\n    function register(email,password) {\n        return createUserWithEmailAndPassword(auth,email,password)\n    }\n\n    function login(email,password) {\n        return signInWithEmailAndPassword(auth,email,password);\n    }\n\n    function signInWithGoogle(){\n        const provider = new GoogleAuthProvider();\n        return signInWithPopup(auth, provider);\n    }\n\n    function resetPassord(oobCode,newPassword){\n        return confirmPasswordReset(auth,oobCode,newPassword); \n    }\n\n    function ForgetPassword(email){\n        return sendPasswordResetEmail(auth,email,{\n            url:'http://localhost:3000/login',\n        })\n    }\n\n    function logout(){\n        return signOut(auth);\n    }\n\n    const value = {\n        currentUser,\n        register,\n        login,\n        logout,\n        signInWithGoogle,\n        ForgetPassword,\n        resetPassord,\n    }\n\n    return <AuthContext.Provider value={value}>\n        {children}\n    </AuthContext.Provider>\n}","import { Box, useColorModeValue } from '@chakra-ui/react'\nimport * as React from 'react'\n\nexport const Card = props => (\n  <Box\n    bg={useColorModeValue('white', 'gray.700')}\n    py='8'\n    px={{ base: '4', md: '10' }}\n    shadow='base'\n    rounded={{ sm: 'lg' }}\n    {...props}\n  />\n)\n","import { Flex, Box, Divider, useColorModeValue, Text } from '@chakra-ui/react'\nimport React from 'react'\n\nexport default function DividerWithText(props) {\n  const { children, ...flexProps } = props\n  return (\n    <Flex align='center' color='gray.300' {...flexProps}>\n      <Box flex='1'>\n        <Divider borderColor='currentcolor' />\n      </Box>\n      <Text\n        as='span'\n        px='3'\n        color={useColorModeValue('gray.600', 'gray.400')}\n        fontWeight='medium'\n      >\n        {children}\n      </Text>\n      <Box flex='1'>\n        <Divider borderColor='currentcolor' />\n      </Box>\n    </Flex>\n  )\n}\n","import React from 'react'\nimport { NavLink as Link, useLocation } from 'react-router-dom'\nimport { Button } from '@chakra-ui/react'\n\nexport default function Navlink({ to, name, ...rest }) {\n  const location = useLocation()\n\n  const isActive = location.pathname === to\n\n  return (\n    <Link to={to}>\n      <Button\n        as='a'\n        variant={isActive ? 'outline' : 'ghost'}\n        colorScheme={isActive ? 'primary' : 'gray'}\n        {...rest}\n      >\n        {name}\n      </Button>\n    </Link>\n  )\n}\n","import {\n  Box,\n  HStack,\n  IconButton,\n  Spacer,\n  useColorMode,\n  useColorModeValue,\n} from '@chakra-ui/react'\nimport React from 'react'\nimport { FaMoon, FaSun } from 'react-icons/fa'\nimport { useAuth } from '../context/AuthContext'\nimport Navlink from './Navlink'\n\nexport function Navbar() {\n  const { toggleColorMode } = useColorMode()\n\n  const {currentUser,logout} = useAuth()\n\n\n  return (\n    <Box\n      borderBottom='2px'\n      borderBottomColor={useColorModeValue('gray.100', 'gray.700')}\n      mb={4}\n    >\n      <HStack py={4} justifyContent='flex-end' maxW='container.lg' mx='auto'>\n        <Navlink to='/' name='Firbase Authentication' size='lg' />\n        <Spacer />\n       {!currentUser && <Navlink to='/login' name='Login' />}\n        {!currentUser && <Navlink to='/register' name='Register' />}\n        {currentUser && <Navlink to='/profile' name='Profile' />}\n        {currentUser && <Navlink to='/protected-page' name='Protected' />}\n        {currentUser && <Navlink\n          to='/logout'\n          name='Logout'\n          onClick={async e => {\n            e.preventDefault()\n            // handle logout\n            logout();\n            \n          }}\n        />}\n        <IconButton\n          variant='outline'\n          icon={useColorModeValue(<FaSun />, <FaMoon />)}\n          onClick={toggleColorMode}\n          aria-label='toggle-dark-mode'\n        />\n      </HStack>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { Container } from '@chakra-ui/react'\nimport { Navbar } from './Navbar'\n\nexport function Layout(props) {\n  return (\n    <>\n      <Navbar />\n      <Container maxW='container.lg'>{props.children}</Container>\n    </>\n  )\n}\n","import {\n  Button,\n  Center,\n  chakra,\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n  Stack,\n  useToast,\n} from '@chakra-ui/react'\nimport React, { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Card } from '../components/Card'\nimport DividerWithText from '../components/DividerWithText'\nimport { Layout } from '../components/Layout'\nimport { useAuth } from '../context/AuthContext'\n\nexport default function ForgotPasswordPage() {\n  const history = useHistory()\n  const [email, setEmail] = useState('')\n  const {ForgetPassword} = useAuth();\n  const toast = useToast()\n\n  return (\n    <Layout>\n      <Heading textAlign='center' my={12}>\n        Forgot password\n      </Heading>\n      <Card maxW='md' mx='auto' mt={4}>\n        <chakra.form\n          onSubmit={async e => {\n            e.preventDefault()\n            // your forgot password logic here\n            ForgetPassword(email)\n              .then(response => {\n                console.log(response)\n                toast({\n                  description:'Email send check out',\n                  status:'success',\n                  duration:'5000',\n                  isCloseabele:true\n                })\n              })\n              .catch(e=> {\n                toast({\n                  description:e.message,\n                  status:'error',\n                  duration:'5000',\n                  isCloseabele:true\n                })\n              })\n          }}\n        >\n          <Stack spacing='6'>\n            <FormControl id='email'>\n              <FormLabel>Email address</FormLabel>\n              <Input \n              value={email}\n              onChange={e=> setEmail(e.target.value)}\n              name='email' type='email' autoComplete='email' required />\n            </FormControl>\n            <Button type='submit' colorScheme='primary' size='lg' fontSize='md'>\n              Submit\n            </Button>\n          </Stack>\n        </chakra.form>\n        <DividerWithText my={6}>OR</DividerWithText>\n        <Center>\n          <Button variant='link' onClick={() => history.push('/login')}>\n            Login\n          </Button>\n        </Center>\n      </Card>\n    </Layout>\n  )\n}\n","import {\n  Badge,\n  chakra,\n  Code,\n  Heading,\n  List,\n  ListItem,\n  OrderedList,\n  Tag,\n  Text,\n} from '@chakra-ui/react'\nimport React from 'react'\nimport { Layout } from '../components/Layout'\nimport { Link } from 'react-router-dom'\nimport { useAuth } from '../context/AuthContext'\n\nexport default function Homepage() {\n  const { currentUser } = useAuth()\n  return (\n    <Layout>\n      <Heading>Home page</Heading>\n      <Text my={6}>{`The current user is ${currentUser}`}</Text>\n\n      <Heading>\n        Firebase Authentication\n        <chakra.span\n          fontWeight='black'\n          fontStyle='italic'\n          fontSize='9xl'\n          mx={2}\n        >\n          v9\n        </chakra.span>\n        <Badge\n          fontWeight='black'\n          fontSize='4xl'\n          mx={2}\n          px={2}\n          colorScheme='green'\n        >\n          NEW API\n        </Badge>\n      </Heading>\n      <OrderedList fontSize='3xl' my={4}>\n        <ListItem>Email password authentication (Register/Login)</ListItem>\n        <ListItem>Google Sign in</ListItem>\n        <ListItem>Forgot Password</ListItem>\n        <ListItem>Custom Reset password page</ListItem>\n        <ListItem>Protected routes</ListItem>\n        <ListItem>\n          <Code fontSize='inherit'> Redirect TO</Code> or Back (keeping the\n          state)\n        </ListItem>\n        <ListItem>\n          custom Auth Hook <Code fontSize='3xl'>useAuth()</Code>\n        </ListItem>\n        <ListItem>Loading indicators while sign-in/up</ListItem>\n        <ListItem>\n          Dark Mode enabled template using\n          <Badge\n            fontSize='inherit'\n            colorScheme='teal'\n            mx={2}\n            textTransform='capitalize'\n            borderRadius='md'\n          >\n            Chakra UI\n          </Badge>\n        </ListItem>\n      </OrderedList>\n      <Heading size='md' mt={20}>\n        Some other links (only for reference):\n      </Heading>\n      <List>\n        <ListItem>\n          <Link to='/reset-password'>reset page</Link>\n        </ListItem>\n        <ListItem>\n          <Link to='/forgot-password'>forgot page</Link>\n        </ListItem>\n      </List>\n    </Layout>\n  )\n}\n","import React,{useEffect,useRef} from 'react'\n\nexport default function useMounted() {\n     \n    const mounted = useRef(false);\n     \n    useEffect(() => {\n        mounted.current = true\n        return () => {\n          mounted.current = false\n        }\n      }, [])\n\n    return mounted\n}\n","import {\n  Button,\n  chakra,\n  FormControl,\n  FormLabel,\n  Heading,\n  HStack,\n  Input,\n  Stack,\n  useToast,\n  Text,\n  Box,\n  Flex,\n} from '@chakra-ui/react'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { FaGoogle } from 'react-icons/fa'\nimport { Link, useHistory,useLocation } from 'react-router-dom'\nimport { Card } from '../components/Card'\nimport DividerWithText from '../components/DividerWithText'\nimport { Layout } from '../components/Layout'\nimport { useAuth } from '../context/AuthContext'\nimport useMounted from '../hooks/useMounted'\n\nexport default function Loginpage() {\n\n  const history = useHistory()\n  const location = useLocation();\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [isSubmiting, setIsSubmiting] = useState(false)\n  const toast = useToast();\n\n  const { login, signInWithGoogle } = useAuth();\n\n  const mounted = useMounted();\n \n\n  return (\n    <Layout>\n      <Heading textAlign='center' my={12}>\n        Login\n      </Heading>\n      <Card maxW='md' mx='auto' mt={4}>\n        <chakra.form\n          onSubmit={async e => {\n            e.preventDefault()\n            // your login logic here\n            if(!email || !password){\n              toast({\n                description:\"Credential no valid\", \n                status:'error',\n                duration:'5000',\n                inCloseable:true\n              })\n            }\n            setIsSubmiting(true)\n            login(email, password)\n              .then((response)=> {\n                history.push(location.state?.from ?? '/profile')\n                console.log(response)\n              })\n              .catch((error)=> {\n                  console.log(error.message)\n                  toast({\n                    description:error.message , \n                    status:'error',\n                    duration:'5000',\n                    inCloseable:true\n                  })\n                })\n                .finally(()=> mounted.current && setIsSubmiting(false))\n          }}\n        >\n          <Stack spacing='6'>\n            <FormControl id='email'>\n              <FormLabel>Email address</FormLabel>\n              <Input \n              value={email} \n              onChange ={e=> setEmail(e.target.value)}\n              name='email' \n              type='email' \n              autoComplete='email' \n              required />\n\n            </FormControl>\n            <FormControl id='password'>\n              <FormLabel>Password</FormLabel>\n              <Input\n                value={password} \n                onChange ={e=> setPassword(e.target.value)}\n                name='password'\n                type='password'\n                autoComplete='password'\n                required\n              />\n            </FormControl>\n            {/* <PasswordField /> */}\n            <Button isLoading={isSubmiting} type='submit' colorScheme='primary' size='lg' fontSize='md'>\n              Sign in\n            </Button>\n          </Stack>\n        </chakra.form>\n        <HStack justifyContent='space-between' my={4}>\n          <Button variant='link'>\n            <Link to='/forgot-password'>Forgot password?</Link>\n          </Button>\n          <Button variant='link' onClick={() => history.push('/register')}>\n            Register\n          </Button>\n        </HStack>\n        <DividerWithText my={6}>OR</DividerWithText>\n        <Button\n          variant='outline'\n          isFullWidth\n          colorScheme='red'\n          leftIcon={<FaGoogle />}\n          onClick={() => \n            signInWithGoogle()\n              .then(user => console.log(user))\n              .catch(error => console.log(error))\n          }\n        >\n          Sign in with Google\n        </Button>\n      </Card>\n    </Layout>\n  )\n}\n","import { Heading } from '@chakra-ui/react'\nimport React from 'react'\nimport { Layout } from '../components/Layout'\n\nexport default function NotfoundPage() {\n  return (\n    <Layout>\n      <Heading>Not found page</Heading>\n    </Layout>\n  )\n}\n","import React from 'react'\nimport { Layout } from '../components/Layout'\nimport { Badge, Code,chakra, Container, Heading } from '@chakra-ui/react'\nimport { Card } from '../components/Card'\nimport { useAuth } from '../context/AuthContext'\n\nexport default function Profilepage() {\n  const {currentUser} = useAuth()\n  return (\n    <Layout>\n      <Heading>\n        Profile page\n        <Badge colorScheme='green' fontSize='lg' mx={4}>\n          Protected Page\n        </Badge>\n      </Heading>\n\n      <Container maxW='container.lg' overflowX='auto' py={4}>\n        <chakra.pre>\n          {JSON.stringify(currentUser,null,2)}\n        </chakra.pre>\n      </Container>\n    </Layout>\n  )\n}\n","import { Heading, Container, Badge } from '@chakra-ui/react'\nimport React from 'react'\nimport { Layout } from '../components/Layout'\n\nexport default function ProtectedPage() {\n  return (\n    <Layout>\n      <Heading>\n        Protected page\n        <Badge colorScheme='green' fontSize='lg' mx={4}>\n          Protected Page\n        </Badge>\n      </Heading>\n      <Container maxW='container.lg' overflowX='auto' py={4}></Container>\n    </Layout>\n  )\n}\n","import {\n  Button,\n  Center,\n  chakra,\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n  Stack,\n  useToast,\n} from '@chakra-ui/react'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { FaGoogle } from 'react-icons/fa'\nimport { useHistory } from 'react-router-dom'\nimport { Card } from '../components/Card'\nimport DividerWithText from '../components/DividerWithText'\nimport { Layout } from '../components/Layout'\nimport { useAuth } from '../context/AuthContext'\nimport useMounted from '../hooks/useMounted'\n\nexport default function Registerpage() {\n  const history = useHistory()\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [isSubmiting, setIsSubmiting] = useState(false)\n  const toast = useToast();\n\n  const { register } = useAuth();\n\n  const mounted = useMounted()\n  \n  return (\n    <Layout>\n      <Heading textAlign='center' my={12}>\n        Register\n      </Heading>\n      <Card maxW='md' mx='auto' mt={4}>\n        <chakra.form\n          onSubmit={async e => {\n            e.preventDefault()\n            // your register logic here\n            if(!email || !password){\n              toast({\n                description:\"Credential no valid\", \n                status:'error',\n                duration:'5000',\n                inCloseable:true\n              })\n            }\n            setIsSubmiting(true)\n            register(email, password)\n              .then((response)=> console.log(response))\n              .catch((error)=> {\n                  console.log(error.message)\n                  toast({\n                    description:error.message , \n                    status:'error',\n                    duration:'5000',\n                    inCloseable:true\n                  })\n                })\n                .finally(()=> mounted.current && setIsSubmiting(false))\n          }}\n        >\n          <Stack spacing='6'>\n            <FormControl id='email'>\n              <FormLabel>Email address</FormLabel>\n              <Input \n                value={email} \n                onChange ={e=> setEmail(e.target.value)}\n                name='email' \n                type='email' \n                autoComplete='email' \n                required />\n            </FormControl>\n            <FormControl id='password'>\n              <FormLabel>Password</FormLabel>\n              <Input\n                value={password} \n                onChange ={e=> setPassword(e.target.value)}\n                name='password'\n                type='password'\n                autoComplete='password'\n                // required\n              />\n            </FormControl>\n            <Button \n              isLoading={isSubmiting}\n              type='submit' \n              colorScheme='primary' \n              size='lg' \n              fontSize='md'>\n              Sign up\n            </Button>\n          </Stack>\n        </chakra.form>\n        <Center my={4}>\n          <Button variant='link' onClick={() => history.push('/login')}>\n            Login\n          </Button>\n        </Center>\n        <DividerWithText my={6}>OR</DividerWithText>\n        <Button\n          variant='outline'\n          isFullWidth\n          colorScheme='red'\n          leftIcon={<FaGoogle />}\n          onClick={() => alert('sign in with google')}\n        >\n          Sign in with Google\n        </Button>\n      </Card>\n    </Layout>\n  )\n}\n","import {\n  Button,\n  chakra,\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n  Stack,\n  useToast,\n} from '@chakra-ui/react'\nimport React, { useState } from 'react'\nimport { Card } from '../components/Card'\nimport { Layout } from '../components/Layout'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { useAuth } from '../context/AuthContext'\n\nfunction useQuery() {\n  const location = useLocation()\n  return new  URLSearchParams(location.search);\n}\n\nexport default function ResetPasswordPage() {\n  const history = useHistory()\n  const toast = useToast();\n  const {resetPassord} = useAuth();\n  const query = useQuery()\n  const [newPassword, setNewPassword] = useState('')\n  return (\n    <Layout>\n      <Heading textAlign='center' my={12}>\n        Reset password\n      </Heading>\n      <Card maxW='md' mx='auto' mt={4}>\n        <chakra.form\n          onSubmit={async e => {\n            e.preventDefault()\n            // handle reset password\n            resetPassord(query.get('oobCode'),newPassword)\n              .then(res => {\n                toast({\n                  description:\"Password has been changed\", \n                  status:'success',\n                  duration:'5000',\n                  inCloseable:true\n                })\n                history.push('/login')\n              })\n              .catch(err => {\n                toast({\n                  description:err.message, \n                  status:'error',\n                  duration:'5000',\n                  inCloseable:true\n                })\n              })\n          }}\n        >\n          <Stack spacing='6'>\n            <FormControl id='password'>\n              <FormLabel>New password</FormLabel>\n              <Input \n                value={newPassword}\n                onChange={e => setNewPassword(e.target.value)}\n                type='password' autoComplete='password' required />\n            </FormControl>\n            <Button type='submit' colorScheme='pink' size='lg' fontSize='md'>\n              Reset password\n            </Button>\n          </Stack>\n        </chakra.form>\n      </Card>\n    </Layout>\n  )\n}\n","import React from 'react'\nimport { BrowserRouter as Router, Route, Switch,Redirect,useLocation } from 'react-router-dom'\nimport { useAuth } from '../context/AuthContext'\nimport ForgotPasswordPage from '../pages/ForgotPasswordPage'\nimport Homepage from '../pages/Homepage'\nimport Loginpage from '../pages/Loginpage'\nimport NotfoundPage from '../pages/NotfoundPage'\nimport Profilepage from '../pages/Profilepage'\nimport ProtectedPage from '../pages/ProtectedPage'\nimport Registerpage from '../pages/Registerpage'\nimport ResetPasswordPage from '../pages/ResetPasswordPage'\n\nexport default function AppRouter(props) {\n  return (\n    <>\n      <Router>\n        <Switch>\n          <Route exact path='/' component={Homepage} />\n          <ProtechRoute exact path='/login' component={Loginpage} />\n          <ProtechRoute exact path='/register' component={Registerpage} />\n          <ProtechRoute exact path='/profile' component={Profilepage} />\n          <ProtechRoute exact path='/protected-page' component={ProtectedPage} />\n          <ProtechRoute exact path='/forgot-password' component={ForgotPasswordPage} />\n          <ProtechRoute exact path='/reset-password' component={ResetPasswordPage} />\n          <Route exact path='*' component={NotfoundPage} />\n        </Switch>\n      </Router>\n    </>\n  )\n}\n\nfunction ProtechRoute(props){\n  const {currentUser} = useAuth();\n  const location = useLocation();\n  const { path } = props \n\n  if(path === '/login' || path === '/register' || path === '/forgot-password' || path === '/reset-password') {\n    return currentUser ?\n    ( \n      <Redirect to={location.state?.from ?? '/profile'} />\n    ) :(\n      <Route {...props} />\n    )  \n      \n  }\n\n  return currentUser ? <Route {...props}/> : <Redirect to={{\n    pathname: '/login',\n    state:{'from':path},\n  }}/>\n}","import React from 'react'\nimport AppRouter from './components/AppRouter'\nimport AuthContextProvider from './context/AuthContext'\nfunction App() {\n  return (\n    <AuthContextProvider>\n      <AppRouter />\n    </AuthContextProvider>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport {\n  ChakraProvider,\n  ColorModeScript,\n  extendTheme,\n  theme,\n} from '@chakra-ui/react'\n\nconst customTheme = extendTheme({\n  config: {\n    initialColorMode: 'light',\n    useSystemColorMode: false,\n  },\n  colors: {\n    primary: theme.colors.pink,\n  },\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={customTheme}>\n      <ColorModeScript initialColorMode={customTheme.config.initialColorMode} />\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}